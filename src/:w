#include <cstdlib>
#include <cmath>

#include "types.cpp"

struct Points {
    f64* data;
    u64 count;
};

Points sampleLinearly(i64 from, i64 to, u64 count) {
    Points points;
    points.data = static_cast<f64*>(aligned_alloc(64, sizeof(f64) * count));
    points.count = count;

    f64 gap = (to - from) / static_cast<f64>(count);

    f64* ptr = points.data;
    for (u64 i = 0; i < count; ++i) {
        *(ptr + i) = from + i * gap;
    }

    return points;
}

f64 maxAbsoluteError(f64 func1(f64), f64 func2(f64), Points pts) {
    f64 max = 0.0;

    for (u64 i = 0; i < pts.count; ++i) {
        f64 absDiff = fabs(func1(pts.data[i]) - func2(pts.data[i]));
        max = max < absDiff ? absDiff : max;
    }

    return max;
}

int main() {



}
